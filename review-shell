#!/usr/bin/env python3

import collections
import json
import re

from sh import file
from sh import git
from sh import shellcheck


def print_z(*args):
    print(*args, end='')


def mimetype(path):
    return file('--brief', '--mime-type', path).strip()


def is_shell_script(path):
    return path.endswith('.sh') \
        or (mimetype(path) == 'text/x-shellscript')


def extract_added_lines_ranges(diff_string):
    prog = re.compile('@@ [^ ]+ \+(\d+),?(\d+)?')
    for line in diff_string:
        if not line.startswith('@@'):
            continue
        n, offset = prog.match(line).groups()
        line_from = max(int(n), 1)
        line_to = line_from + int(offset or 0)
        yield (line_from, line_to)


def added_lines(file):
    out = git('diff', '-U0',
              '--ignore-space-at-eol',
              'HEAD~1',
              file,
              _tty_out=False)
    return extract_added_lines_ranges(out)


def list_files():
    out = git('diff', '-z',
              '--diff-filter=AMrcd',
              '--name-only',
              '--no-ext-diff',
              'HEAD~1',
              _tty_out=False)
    return filter(None, out.split('\0'))


def decorate_shellcheck(script_file):
    findings = json.loads(shellcheck('--format=json',
                                     script_file,
                                     _ok_code=[0, 1]).strip())
    if findings == []:
        return []

    warnings_list = list(findings)  # shallow copy
    Range = collections.namedtuple('Range', ['start_line', 'end_line'])
    added_fragments = list(added_lines(script_file))

    for w in warnings_list:
        w[u'new'] = False

    while added_fragments and warnings_list:
        w = warnings_list[0]
        fragment = Range(*(added_fragments[0]))
        warning = Range(w[u'line'], w[u'endLine'])

        if fragment.end_line < warning.start_line:
            added_fragments.pop(0)
            continue

        if warning.end_line < fragment.start_line:
            warnings_list.pop(0)
            continue

        w[u'new'] = True
        warnings_list.pop(0)

    return findings


def main():
    shell_scripts = filter(is_shell_script, list_files())
    for s in shell_scripts:
        r = decorate_shellcheck(s)
        print(json.dumps(r, indent=2))


if __name__ == "__main__":
    main()
